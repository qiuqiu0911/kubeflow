{
  "swagger": "2.0",
  "info": {
    "description": "Python SDK for Kubeflow Training",
    "title": "Kubeflow Training SDK",
    "version": "v1.3.0"
  },
  "paths": {},
  "definitions": {
    "v1.ElasticPolicy": {
      "type": "object",
      "properties": {
        "maxReplicas": {
          "description": "upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas, defaults to null.",
          "type": "integer",
          "format": "int32"
        },
        "maxRestarts": {
          "type": "integer",
          "format": "int32"
        },
        "metrics": {
          "description": "metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/k8s.io.api.autoscaling.v2beta2.MetricSpec"
          }
        },
        "minReplicas": {
          "description": "minReplicas is the lower limit for the number of replicas to which the training job can scale down.  It defaults to null.",
          "type": "integer",
          "format": "int32"
        },
        "nProcPerNode": {
          "description": "Number of workers per node; supported values: [auto, cpu, gpu, int].",
          "type": "integer",
          "format": "int32"
        },
        "rdzvBackend": {
          "type": "string"
        },
        "rdzvConf": {
          "description": "RDZVConf contains additional rendezvous configuration (\u003ckey1\u003e=\u003cvalue1\u003e,\u003ckey2\u003e=\u003cvalue2\u003e,...).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.RDZVConf"
          }
        },
        "rdzvHost": {
          "type": "string"
        },
        "rdzvId": {
          "type": "string"
        },
        "rdzvPort": {
          "type": "integer",
          "format": "int32"
        },
        "standalone": {
          "description": "Start a local standalone rendezvous backend that is represented by a C10d TCP store on port 29400. Useful when launching single-node, multi-worker job. If specified --rdzv_backend, --rdzv_endpoint, --rdzv_id are auto-assigned; any explicitly set values are ignored.",
          "type": "boolean"
        }
      }
    },
    "v1.JobCondition": {
      "description": "JobCondition describes the state of the job at a certain point.",
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "$ref": "#/definitions/v1.Time"
        },
        "lastUpdateTime": {
          "description": "The last time this condition was updated.",
          "$ref": "#/definitions/v1.Time"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of job condition.",
          "type": "string"
        }
      }
    },
    "v1.JobStatus": {
      "description": "JobStatus represents the current observed state of the training Job.",
      "type": "object",
      "required": [
        "conditions",
        "replicaStatuses"
      ],
      "properties": {
        "completionTime": {
          "description": "Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/v1.Time"
        },
        "conditions": {
          "description": "Conditions is an array of current observed job conditions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.JobCondition"
          }
        },
        "lastReconcileTime": {
          "description": "Represents last time when the job was reconciled. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/v1.Time"
        },
        "replicaStatuses": {
          "description": "ReplicaStatuses is map of ReplicaType and ReplicaStatus, specifies the status of each replica.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1.ReplicaStatus"
          }
        },
        "startTime": {
          "description": "Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
          "$ref": "#/definitions/v1.Time"
        }
      }
    },
    "v1.MXJob": {
      "description": "MXJob is the Schema for the mxjobs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1.MXJobSpec"
        },
        "status": {
          "$ref": "#/definitions/v1.JobStatus"
        }
      }
    },
    "v1.MXJobList": {
      "description": "MXJobList contains a list of MXJob",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.MXJob"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ListMeta"
        }
      }
    },
    "v1.MXJobSpec": {
      "description": "MXJobSpec defines the desired state of MXJob",
      "type": "object",
      "required": [
        "runPolicy",
        "jobMode",
        "mxReplicaSpecs"
      ],
      "properties": {
        "jobMode": {
          "description": "JobMode specify the kind of MXjob to do. Different mode may have different MXReplicaSpecs request",
          "type": "string"
        },
        "mxReplicaSpecs": {
          "description": "MXReplicaSpecs is map of common.ReplicaType and common.ReplicaSpec specifies the MX replicas to run. For example,\n  {\n    \"Scheduler\": common.ReplicaSpec,\n    \"Server\": common.ReplicaSpec,\n    \"Worker\": common.ReplicaSpec,\n  }",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1.ReplicaSpec"
          }
        },
        "runPolicy": {
          "description": "RunPolicy encapsulates various runtime policies of the distributed training job, for example how to clean up resources and how long the job can stay active.",
          "$ref": "#/definitions/v1.RunPolicy"
        }
      }
    },
    "v1.MXJobStatus": {
      "description": "MXJobStatus defines the observed state of MXJob",
      "type": "object"
    },
    "v1.PyTorchJob": {
      "description": "PyTorchJob Represents a PyTorchJob resource.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired state of the PyTorchJob.",
          "$ref": "#/definitions/v1.PyTorchJobSpec"
        },
        "status": {
          "description": "Most recently observed status of the PyTorchJob. Read-only (modified by the system).",
          "$ref": "#/definitions/v1.JobStatus"
        }
      }
    },
    "v1.PyTorchJobList": {
      "description": "PyTorchJobList is a list of PyTorchJobs.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of PyTorchJobs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PyTorchJob"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata.",
          "$ref": "#/definitions/v1.ListMeta"
        }
      }
    },
    "v1.PyTorchJobSpec": {
      "description": "PyTorchJobSpec is a desired state description of the PyTorchJob.",
      "type": "object",
      "required": [
        "runPolicy",
        "pytorchReplicaSpecs"
      ],
      "properties": {
        "elasticPolicy": {
          "$ref": "#/definitions/v1.ElasticPolicy"
        },
        "pytorchReplicaSpecs": {
          "description": "A map of PyTorchReplicaType (type) to ReplicaSpec (value). Specifies the PyTorch cluster configuration. For example,\n  {\n    \"Master\": PyTorchReplicaSpec,\n    \"Worker\": PyTorchReplicaSpec,\n  }",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1.ReplicaSpec"
          }
        },
        "runPolicy": {
          "description": "RunPolicy encapsulates various runtime policies of the distributed training job, for example how to clean up resources and how long the job can stay active.",
          "$ref": "#/definitions/v1.RunPolicy"
        }
      }
    },
    "v1.RDZVConf": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1.ReplicaSpec": {
      "description": "ReplicaSpec is a description of the replica",
      "type": "object",
      "properties": {
        "replicas": {
          "description": "Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "restartPolicy": {
          "description": "Restart policy for all replicas within the job. One of Always, OnFailure, Never and ExitCode. Default to Never.",
          "type": "string"
        },
        "template": {
          "description": "Template is the object that describes the pod that will be created for this replica. RestartPolicy in PodTemplateSpec will be overide by RestartPolicy in ReplicaSpec",
          "$ref": "#/definitions/v1.PodTemplateSpec"
        }
      }
    },
    "v1.ReplicaStatus": {
      "description": "ReplicaStatus represents the current observed state of the replica.",
      "type": "object",
      "properties": {
        "active": {
          "description": "The number of actively running pods.",
          "type": "integer",
          "format": "int32"
        },
        "failed": {
          "description": "The number of pods which reached phase Failed.",
          "type": "integer",
          "format": "int32"
        },
        "labelSelector": {
          "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
          "$ref": "#/definitions/v1.LabelSelector"
        },
        "succeeded": {
          "description": "The number of pods which reached phase Succeeded.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1.RunPolicy": {
      "description": "RunPolicy encapsulates various runtime policies of the distributed training job, for example how to clean up resources and how long the job can stay active.",
      "type": "object",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer.",
          "type": "integer",
          "format": "int64"
        },
        "backoffLimit": {
          "description": "Optional number of retries before marking this job failed.",
          "type": "integer",
          "format": "int32"
        },
        "cleanPodPolicy": {
          "description": "CleanPodPolicy defines the policy to kill pods after the job completes. Default to Running.",
          "type": "string"
        },
        "schedulingPolicy": {
          "description": "SchedulingPolicy defines the policy related to scheduling, e.g. gang-scheduling",
          "$ref": "#/definitions/v1.SchedulingPolicy"
        },
        "ttlSecondsAfterFinished": {
          "description": "TTLSecondsAfterFinished is the TTL to clean up jobs. It may take extra ReconcilePeriod seconds for the cleanup, since reconcile gets called periodically. Default to infinite.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1.SchedulingPolicy": {
      "description": "SchedulingPolicy encapsulates various scheduling policies of the distributed training job, for example `minAvailable` for gang-scheduling.",
      "type": "object",
      "properties": {
        "minAvailable": {
          "type": "integer",
          "format": "int32"
        },
        "minResources": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/.Quantity"
          }
        },
        "priorityClass": {
          "type": "string"
        },
        "queue": {
          "type": "string"
        }
      }
    },
    "v1.TFJob": {
      "description": "TFJob represents a TFJob resource.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired state of the TFJob.",
          "$ref": "#/definitions/v1.TFJobSpec"
        },
        "status": {
          "description": "Most recently observed status of the TFJob. Populated by the system. Read-only.",
          "$ref": "#/definitions/v1.JobStatus"
        }
      }
    },
    "v1.TFJobList": {
      "description": "TFJobList is a list of TFJobs.",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "description": "List of TFJobs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.TFJob"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard list metadata.",
          "$ref": "#/definitions/v1.ListMeta"
        }
      }
    },
    "v1.TFJobSpec": {
      "description": "TFJobSpec is a desired state description of the TFJob.",
      "type": "object",
      "required": [
        "runPolicy",
        "tfReplicaSpecs"
      ],
      "properties": {
        "enableDynamicWorker": {
          "description": "A switch to enable dynamic worker",
          "type": "boolean"
        },
        "runPolicy": {
          "description": "RunPolicy encapsulates various runtime policies of the distributed training job, for example how to clean up resources and how long the job can stay active.",
          "$ref": "#/definitions/v1.RunPolicy"
        },
        "successPolicy": {
          "description": "SuccessPolicy defines the policy to mark the TFJob as succeeded. Default to \"\", using the default rules.",
          "type": "string"
        },
        "tfReplicaSpecs": {
          "description": "A map of TFReplicaType (type) to ReplicaSpec (value). Specifies the TF cluster configuration. For example,\n  {\n    \"PS\": ReplicaSpec,\n    \"Worker\": ReplicaSpec,\n  }",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1.ReplicaSpec"
          }
        }
      }
    },
    "v1.XGBoostJob": {
      "description": "XGBoostJob is the Schema for the xgboostjobs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1.XGBoostJobSpec"
        },
        "status": {
          "$ref": "#/definitions/v1.JobStatus"
        }
      }
    },
    "v1.XGBoostJobList": {
      "description": "XGBoostJobList contains a list of XGBoostJob",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.XGBoostJob"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ListMeta"
        }
      }
    },
    "v1.XGBoostJobSpec": {
      "description": "XGBoostJobSpec defines the desired state of XGBoostJob",
      "type": "object",
      "required": [
        "runPolicy",
        "xgbReplicaSpecs"
      ],
      "properties": {
        "runPolicy": {
          "description": "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"make\" to regenerate code after modifying this file",
          "$ref": "#/definitions/v1.RunPolicy"
        },
        "xgbReplicaSpecs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1.ReplicaSpec"
          }
        }
      }
    }
  }
}
